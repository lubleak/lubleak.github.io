<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>萧瑟</title>
  
  
  <link href="https://lubleak.github.io/atom.xml" rel="self"/>
  
  <link href="https://lubleak.github.io/"/>
  <updated>2022-01-05T06:36:40.004Z</updated>
  <id>https://lubleak.github.io/</id>
  
  <author>
    <name>萧瑟</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>识别字符型验证码</title>
    <link href="https://lubleak.github.io/2022/01/04/%E8%AF%86%E5%88%AB%E5%AD%97%E7%AC%A6%E5%9E%8B%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    <id>https://lubleak.github.io/2022/01/04/%E8%AF%86%E5%88%AB%E5%AD%97%E7%AC%A6%E5%9E%8B%E9%AA%8C%E8%AF%81%E7%A0%81/</id>
    <published>2022-01-04T02:55:03.000Z</published>
    <updated>2022-01-05T06:36:40.004Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前情概要"><a href="#前情概要" class="headerlink" title="前情概要"></a>前情概要</h1><p>在学习自动化测试的时候，每次调试代码的时候，都需要手动输入验证，十分的麻烦，然后就想着整个识别验证码。本文的验证码识别只针对简单的字符型验证码，此文借鉴的是这位大佬的文章，<a href="https://www.cnblogs.com/beer/p/5672678.html">点这</a>。</p><h1 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明"></a>免责声明</h1><p>本篇文章只是用于学习交流使用</p><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><p>整体流程大概分为八个步骤，在运行以下代码前需要导入以下包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line">import os</span><br><span class="line">import requests</span><br><span class="line">from PIL import Image</span><br><span class="line">from pathlib import Path</span><br><span class="line">from libsvm.python.libsvm.svm import *</span><br><span class="line">from libsvm.python.libsvm.svmutil import *</span><br></pre></td></tr></table></figure><h2 id="1、下载图片"><a href="#1、下载图片" class="headerlink" title="1、下载图片"></a>1、下载图片</h2><p>下载图片这个环节中，每个人找的验证码和链接都不相同，我这边的请求接口返回的是使用base64加密过的结果，需要先获取到返回的结果，然后解密之后下载。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def down_img(url,number,savepath):</span><br><span class="line">    for x in range(number):</span><br><span class="line">        res = requests.get(url, stream=True)</span><br><span class="line">        burl = res.text</span><br><span class="line">        burl = eval(burl)</span><br><span class="line">        img_base = burl.get(&quot;result&quot;)[22:]</span><br><span class="line">        img_data = base64.b64decode(img_base)</span><br><span class="line">        imgpath = savepath + str(x) + &#x27;.jpg&#x27;</span><br><span class="line">        imgpath = Path(imgpath).as_posix()</span><br><span class="line">        with open(imgpath, &#x27;wb&#x27;) as f:</span><br><span class="line">            f.write(img_data)</span><br><span class="line">            f.flush()</span><br><span class="line">            f.close()</span><br><span class="line">        bimg = get_bin_table(imgpath)</span><br></pre></td></tr></table></figure><p>在下载图片时可能会存在像下面的报错，需要在代码中添加以下代码可以解决。<br><img src="/image/dowimg.png" alt="错误提示"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">global false, null, true</span><br><span class="line">false = null = true = &#x27;&#x27;</span><br></pre></td></tr></table></figure><p>ps：我在这偷懒，直接在下载图片的时候进行处理图片`</p><h2 id="2、处理图片（降噪、二值化图片）"><a href="#2、处理图片（降噪、二值化图片）" class="headerlink" title="2、处理图片（降噪、二值化图片）"></a>2、处理图片（降噪、二值化图片）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">def get_bin_table(path, threshold=50):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    获取灰度转二值的映射table</span><br><span class="line">    :param threshold:趋向0为黑，反之为白</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    image = Image.open(path)</span><br><span class="line">    imgl = image.convert(&#x27;L&#x27;)</span><br><span class="line">    table = []</span><br><span class="line">    for i in range(256):</span><br><span class="line">        if i &lt; threshold:</span><br><span class="line">            table.append(0)</span><br><span class="line">        else:</span><br><span class="line">            table.append(1)</span><br><span class="line"></span><br><span class="line">    out = imgl.point(table, &#x27;1&#x27;)</span><br><span class="line">    bmppath = os.path.splitext(path)[0] + &#x27;.bmp&#x27;</span><br><span class="line">    bmppath = Path(bmppath).as_posix()</span><br><span class="line">    out.save(bmppath)</span><br><span class="line">    os.remove(path)</span><br></pre></td></tr></table></figure><p>这边存在一个坑，在二值化图片之后，保存的图片最好是保存为bmp格式，之前保存为jpg格式的文件，图片依旧存在灰点，是因为保存jpg格式存在失真的问题</p><h2 id="3、切割图片"><a href="#3、切割图片" class="headerlink" title="3、切割图片"></a>3、切割图片</h2><p>切割图片需要根据自己的验证码进行划分，找出验证码中每个字符生成位置的规律，根据规律进行切割</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def get_crop_imgs(img):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    按照图片的特点,进行切割,这个要根据具体的验证码来进行工作.</span><br><span class="line">    :param img:</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    for i in range(4):</span><br><span class="line">        x = 8 + i * 23 </span><br><span class="line">        y = 8</span><br><span class="line">        child_img = img.crop((x, y, x + 23, y + 23))</span><br><span class="line">        img_name = os.path.splitext(img)[0] + &#x27;_&#x27;+str(i) + &#x27;.bmp&#x27;</span><br><span class="line">        img_name = Path(img_name).as_posix()</span><br><span class="line">        child_img.save(img_name)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4、人工识别"><a href="#4、人工识别" class="headerlink" title="4、人工识别"></a>4、人工识别</h2><p>这个步骤没啥好说的，就是将切割好的图片进行分类，前期自己调试的时候不需要太多，每个类型大概十来个就可以。<br><img src="/image/falg.png" alt="flag"></p><h2 id="5、获取字符特征"><a href="#5、获取字符特征" class="headerlink" title="5、获取字符特征"></a>5、获取字符特征</h2><p>这个步骤是整个流程的关键，这取决于模型是否能够正确的识别。里面的逻辑依旧和验证码的大小有关，需要根据自己调试的图片进行修改。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">def get_feature(img):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    获取指定图片的特征值,</span><br><span class="line">    1. 按照每排的像素点,高度为23,则有23个维度,然后为23列,总共23个维度</span><br><span class="line">    :param img_path:</span><br><span class="line">    :return:一个维度为23（高度）的列表</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    width, height = img.size</span><br><span class="line">    pixel_cnt_list = []</span><br><span class="line">    for y in range(height):</span><br><span class="line">        pix_cnt_x = 0</span><br><span class="line">        for x in range(width):</span><br><span class="line">            if img.getpixel((x, y)) == 0:  # 黑色点</span><br><span class="line">                pix_cnt_x += 1</span><br><span class="line"></span><br><span class="line">        pixel_cnt_list.append(pix_cnt_x)</span><br><span class="line"></span><br><span class="line">    for x in range(width):</span><br><span class="line">        pix_cnt_y = 0</span><br><span class="line">        for y in range(height):</span><br><span class="line">            if img.getpixel((x, y)) == 0:  # 黑色点</span><br><span class="line">                pix_cnt_y += 1</span><br><span class="line"></span><br><span class="line">        pixel_cnt_list.append(pix_cnt_y)</span><br><span class="line"></span><br><span class="line">    return pixel_cnt_list</span><br></pre></td></tr></table></figure><h2 id="6、生成libsvm格式数据文件"><a href="#6、生成libsvm格式数据文件" class="headerlink" title="6、生成libsvm格式数据文件"></a>6、生成libsvm格式数据文件</h2><p>在获取到图片的特征后，需要将列表转化为libsvm可以识别的格式文件，格式文件和libsvm包的安装可以查看这位大佬整理的文章。<a href="https://www.cnblogs.com/Finley/p/5329417.html">点这</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def libformat(name, flag, list):</span><br><span class="line">    with open(name, &#x27;a&#x27;) as f:</span><br><span class="line">        for i in range(len(list)):</span><br><span class="line">            if i != 0:</span><br><span class="line">                date = f&#x27;&#123;i + 1&#125;:&#123;list[i]&#125; &#x27;</span><br><span class="line">            else:</span><br><span class="line">                date = f&#x27;&#123;ord(flag)&#125; &#123;i + 1&#125;:&#123;list[i]&#125; &#x27;</span><br><span class="line">            f.write(date)</span><br><span class="line">            f.flush()</span><br><span class="line">        f.write(&#x27;\n&#x27;)</span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure><h2 id="7、模型训练"><a href="#7、模型训练" class="headerlink" title="7、模型训练"></a>7、模型训练</h2><p>将上面的生成的libsvm格式文件通过libsvm生成模型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def get_model(modeldate):</span><br><span class="line">    y, x = svm_read_problem(modeldate)</span><br><span class="line">    model = svm_train(y, x)</span><br><span class="line">    svm_save_model(&#x27;model_file&#x27;, model)</span><br></pre></td></tr></table></figure><h2 id="8、测试识别"><a href="#8、测试识别" class="headerlink" title="8、测试识别"></a>8、测试识别</h2><p>最激动人心的时刻到了，识别单个验证码结果，在模型数量比较少的情况下，识别的正确率可能比较低，模型数量上去后，就可以达到100%。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def test_model(self):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">        return: 识别结果</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    model = svm_load_model(model_file)</span><br><span class="line">    yt, xt = svm_read_problem(test_date)</span><br><span class="line">    p_label, p_acc, p_val = svm_predict(yt, xt, model)  # p_label即为识别的结果</span><br><span class="line">    result = &#x27;&#x27;</span><br><span class="line">    for item in p_label:</span><br><span class="line">        result = result + chr(int(item))</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><p>之后就是重复增加模型，提高验证码的识别率。<br>最后，感谢大家阅读这篇文章。其次代码中还有好多需要改进的地方，再者本人初次编写博客，存在哪些问题，恳请各位大佬指出，欢迎各位大佬评论留言。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前情概要&quot;&gt;&lt;a href=&quot;#前情概要&quot; class=&quot;headerlink&quot; title=&quot;前情概要&quot;&gt;&lt;/a&gt;前情概要&lt;/h1&gt;&lt;p&gt;在学习自动化测试的时候，每次调试代码的时候，都需要手动输入验证，十分的麻烦，然后就想着整个识别验证码。本文的验证码识别只针对</summary>
      
    
    
    
    
    <category term="python，验证码识别" scheme="https://lubleak.github.io/tags/python%EF%BC%8C%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://lubleak.github.io/2021/12/27/hello-world/"/>
    <id>https://lubleak.github.io/2021/12/27/hello-world/</id>
    <published>2021-12-27T02:32:56.892Z</published>
    <updated>2021-12-27T02:28:48.437Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
